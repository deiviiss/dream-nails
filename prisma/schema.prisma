generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  admin // Role for admin
  user // Role for user
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     String @default("customer")

  created_at DateTime  @default(now())
  updated_at DateTime?

  expenses Expense[]
  incomes  Income[]
  wallet   Wallet[]
  Thought  Thought[]

  @@map("users")
}

// SALON MODELS
model SalonService {
  id          Int       @id @default(autoincrement())
  category    String
  name        String
  description String
  price       Float
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  @@map("salon_services")
}

model Image {
  id         Int       @id @default(autoincrement())
  url        String
  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("images")
}

// MONEDEX MODELS

model ExpenseCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  expenses    Expense[]

  @@map("expense_categories")
}

model BudgetCategory {
  id        Int      @id @default(autoincrement())
  name      String // Ej: Despensa, Combustible
  amount    Float // Presupuesto asignado
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("budget_categories")
}

model IncomeCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  incomes     Income[]

  @@map("income_categories")
}

model Place {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  expenses    Expense[]

  @@map("places")
}

model Expense {
  id            Int      @id @default(autoincrement())
  name          String
  amount        Float
  method        String
  expense_date  DateTime @default(now())
  expense_month Int      @default(12)
  with_relation Boolean  @default(false)
  is_reconciled Boolean  @default(false)

  place_id            Int
  place               Place           @relation(fields: [place_id], references: [id])
  expense_category_id Int
  expense_category    ExpenseCategory @relation(fields: [expense_category_id], references: [id])

  wallet_id Int
  wallet    Wallet @relation(fields: [wallet_id], references: [id])

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("expenses")
}

model Income {
  id           Int      @id @default(autoincrement())
  name         String
  amount       Float
  method       String
  income_date  DateTime @default(now())
  income_month Int      @default(12)

  income_category_id Int
  income_category    IncomeCategory @relation(fields: [income_category_id], references: [id])

  wallet_id Int
  wallet    Wallet @relation(fields: [wallet_id], references: [id])

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("incomes")
}

enum WalletType {
  debit
  cash
}

model Wallet {
  id         Int        @id @default(autoincrement())
  user_id    Int
  name       String
  balance    Float      @default(0)
  physical   Float?     @default(0)
  type       WalletType @default(debit)
  created_at DateTime   @default(now())
  updated_at DateTime?

  user     User      @relation(fields: [user_id], references: [id])
  expenses Expense[]
  incomes  Income[]
}

// APPEMOTIONS MODELS
model Thought {
  id        Int      @id @default(autoincrement()) @map("thought_id")
  thought   String
  createdAt DateTime @default(now()) @map("create_at")

  emotionId Int     @map("emotion_id")
  emotion   Emotion @relation(fields: [emotionId], references: [id])

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("thoughts")
}

model Emotion {
  id          Int      @id @default(autoincrement()) @map("emotion_id")
  name        String   @default("no-emotion")
  description String   @default("Por definir")
  createdAt   DateTime @default(now()) @map("create_at")

  thoughts Thought[]

  @@map("emotions")
}
